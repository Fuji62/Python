#proc01

simei = ''
nenrei = 0

#関数hyojiの定義
def hyoji():
    print(simei,'さん')
    print(nenrei,'歳ですね')
    print('お若く見えますね')

simei = input('氏名を入力してください->')
nenrei = int(input('年齢を入力してください->'))

#関数hyojiの実行
hyoji()

#--------------------------------------------------------

proc02

def daikei(j, k ,t):
    return (j + k) * t / 2

jotei = int(input('上底を入力してください->'))
katei = int(input('下底を入力してください->'))
takasa = int(input('高さを入力してください->'))

result = daikei(jotei, katei, takasa)

print('面積=', result, 'cm²')



#--------------------------------------------------------

#proc03

import math

def ensui(r, h):
    return 1/3 * math.pi * r ** 2 * h

radius = int(input('底面の円の半径を入力してください->'))
height = int(input('高さを入力してください->'))
result = ensui(radius, height)
print('三角すいの体積=', round(result, 2), 'cm³')



#--------------------------------------------------------

#proc04

def heikin(arr):
    return sum(arr) / len(arr)

score = [80, 72, 56, 45]
result = heikin(score)
print('平均点', result, '点')

#--------------------------------------------------------

#proc05

import math

def seigen(kakudo, nagasa):
    kakudo = math.sin(math.radians(kakudo))
    return nagasa / (kakudo * 2)

k = int(input('角度を入力してください(0～360)->'))
n = int(input('角度の対面の辺の長さを入力してください->'))

result = seigen(k, n)
print('外接円の半径=', round(result, 2))


#--------------------------------------------------------

#proc06

def cipher(s1):
    return 'UTF-8'.encode(s1)
    
    
#def decryption(s2):

t = input('英単語を入力(大文字のみ)->')
result1 = cipher(t)
#result2 = decryption(result1)


print('暗号化=', result1)
#print('復　号=', result2)

#--------------------------------------------------------

#proc07

def calc(price):
    try:
        return int(price * 1.1)
    except TypeError:
        return None

kingaku1 = 1500
kingaku2 = 'ABC'

result1 = calc(kingaku1)
result2 = calc(kingaku2)

print('引数が正常=', result1)
print('引数が異常=', result2)

#--------------------------------------------------------

#proc08

def warizan(n1, n2):
    syo = n1 // n2
    amari = n1 % n2
    return(syo, amari)

num1 = int(input('数値1を入力->'))
num2 = int(input('数値2を入力->'))

a, b = warizan(num1, num2)

print(num1, '÷', num2, '=', a, 'あまり', b)


#--------------------------------------------------------

#proc09

def kukei(t, h):
    try:
        if isinstance(t,int) and isinstance(h,int) and t * h > 0:
            return t * h

    except TypeError: return None
    
result1 = kukei(5, 9)
result2 = kukei(3.5, 10)
result3 = kukei(8, 3)
result4 = kukei(1, 'A')
result5 = kukei(8, 0)

print('result1=', result1)
print('result2=', result2)
print('result3=', result3)
print('result4=', result4)
print('result5=', result5)

#--------------------------------------------------------

#proc10

def ryokin(otona, kodomo):
    if isinstance(otona,int) and isinstance(kodomo,int) and otona * kodomo > -1:
        if otona > 0 or kodomo > 0:
            if otona + kodomo >= 10: return int((otona * 2000 + kodomo * 1000) * 0.8)
            else: return otona * 2000 + kodomo * 1000
    else: return None
 
    
result1 = ryokin(2, 3)
result2 = ryokin(4, 0)
result3 = ryokin(6, 1)
result4 = ryokin(5, 10)
result5 = ryokin(-1, 5)
result6 = ryokin(2, -2)
result7 = ryokin(0, 0)
result8 = ryokin(1.5, 0)
result9 = ryokin(1, '*')

print('result=1', result1)
print('result=2', result2)
print('result=3', result3)
print('result=4', result4)
print('result=5', result5)
print('result=6', result6)
print('result=7', result7)
print('result=8', result8)
print('result=9', result9)

#--------------------------------------------------------

#proc11

#関数calc
def calc(arr):
    return max(arr), min(arr), sum(arr) / len(arr)

#入力処理
arr = []
while True:
    try:
        score = input('点数を入力(0～100 999で終了)->')
        score = int(score)
        if score == 999: break;
        elif not(0 <= score <= 100):
            print('点数は0～100の範囲で入力してください！')
            continue
        else: arr.append(score)
    except ValueError:
        print('整数で入力してください！')
        continue

r1, r2, r3 = calc(arr)
print('最高点=', r1, '最低点=', r2, '平均点=', round(r3, 2))

#--------------------------------------------------------
